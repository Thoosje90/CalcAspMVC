@model CalcAspMVC.Models.CalculatorModel
@{
    ViewData["Title"] = "Calculator";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section css {

    @* Load Custom CSS *@
    <link rel="stylesheet" href="~/css/style.css" asp-append-version="true" />
}

<div id="calcBody" class="calculator">

   <div class="calc">

        <div class="d-flex justify-content-between bd-highlight">
            <div class="p-2 bd-highlight"><h3>Calculator</h3></div>
            <div class="p-2 bd-highlight align-self-center">
                <div class="form-check form-switch fs-3">
                    <input class="form-check-input" type="checkbox" role="switch" id="switchBtn">
                    <label id="themeLbl" class="form-check-label" for="switchBtn">THEME</label>
                </div>
            </div>
        </div>

        <form method="post" asp-action="Calculate">

            @* Create Anti Forgery Token *@
            @Html.AntiForgeryToken()

            <div class="form-group d-flex" wi>
                <input type="text" name="Expression" id="display" class="form-control text-end" readonly value="@Model.Expression" />
            </div>
         
            <div class="form-group mt-2">
                <div class="btn-group d-flex" role="group">
                    <button type="button" class="btn btn-light border" data-action="MemoryClear">MC</button>
                    <button type="button" class="btn btn-light border" data-action="MemoryRecal">MR</button>
                    <button type="button" class="btn btn-light border" data-action="MemoryAdd">M+</button>
                    <button type="button" class="btn btn-light border" data-action="MemorySubstract">M-</button>
                    <button type="button" class="btn btn-light border" data-action="MemoryStore">MS</button>
                    <button type="button" class="btn btn-light border" onclick="showMemory()">M</button>
                </div>
                <div class="btn-group d-flex" role="group">
                    <button type="button" class="btn btn-light border" onclick="addToDisplay('(')">(</button>
                    <button type="button" class="btn btn-light border" onclick="addToDisplay(')')">)</button>
                    <button type="button" class="btn btn-warning border" onclick="clearDisplay()">C</button>
                    <button type="button" class="btn btn-light border" onclick="addToDisplay('/')">/</button>
                </div>
                <div class="btn-group d-flex" role="group">
                    <button type="button" class="btn btn-light border" onclick="addToDisplay('7')">7</button>
                    <button type="button" class="btn btn-light border" onclick="addToDisplay('8')">8</button>
                    <button type="button" class="btn btn-light border" onclick="addToDisplay('9')">9</button>
                    <button type="button" class="btn btn-light border" onclick="addToDisplay('*')">*</button>
                </div>
                <div class="btn-group d-flex" role="group">
                    <button type="button" class="btn btn-light border" onclick="addToDisplay('4')">4</button>
                    <button type="button" class="btn btn-light border" onclick="addToDisplay('5')">5</button>
                    <button type="button" class="btn btn-light border" onclick="addToDisplay('6')">6</button>
                    <button type="button" class="btn btn-light border" onclick="addToDisplay('-')">-</button>
                </div>
                <div class="btn-group d-flex" role="group">
                    <button type="button" class="btn btn-light border" onclick="addToDisplay('1')">1</button>
                    <button type="button" class="btn btn-light border" onclick="addToDisplay('2')">2</button>
                    <button type="button" class="btn btn-light border" onclick="addToDisplay('3')">3</button>
                    <button type="button" class="btn btn-light border" onclick="addToDisplay('+')">+</button>
                </div>
                <div class="btn-group d-flex" role="group">
                    <button type="button" class="btn btn-light border" onclick="addToDisplay('0')">0</button>
                    <button type="button" class="btn btn-light border" onclick="addToDisplay('.')">.</button>
                    <button type="button" class="btn btn-light border popupBtn" onclick="removeFromDisplay()"><i class="bi bi-backspace" style="font-size:24px;"></i></button>
                </div>
                <div class="btn-group d-flex" role="group">
                    <button type="button" class="btn equal border" data-action="Calculate">=</button>
                </div>      
            </div>
          
        </form>
        <div class=" mt-3 alert alert-danger calcAlert" id="result" role="alert">
            @*  Errors  *@
        </div>
       
    </div>
</div>


<!-- Memory Modal -->
<div class="modal fade" id="memoryModal" tabindex="-1" role="dialog" aria-labelledby="memoryModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-bottom" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="memoryModalLabel">Memory</h5>
                <button id="closeModal" type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <ul class="list-group list" id="memory-list">
                    <!-- Memory list items will be added here by JavaScript -->
                </ul>
            </div>
        </div>
    </div>
</div>


<script src="~/lib/jquery/dist/jquery.min.js"></script>

<script>

    // Adjust modal width when window is resized
    window.onresize = function () {
        adjustModalPosition();
    };

    // When page has loaded
    $(document).ready(function () {
        $('#result').hide();
        // Switch calculator theme to default
        switchTheme("light");
        // Update model position
        adjustModalPosition();
    });

    // On Switch button click
    $('#switchBtn').change(function () {
        
        // Toggle calculator theme(s)
        if ($(this).prop('checked') == true) {
            switchTheme("dark");
        }
        else {
            switchTheme("light");
        }
    });

    // Click Event for closing memoryModal
    $('#closeModal').click(function () {
        hideMemory();
    });


    // Clear Display
    function clearDisplay() {
        // Update display with an empty string
        $("#display").val("");
        // Remove any error notifications
        removeErrorNotification();
    }

    // Add Digits & Operators to Display
    function addToDisplay(value) {

        // Check if error notifications are being shown
        removeErrorNotification()
       
        // Handle input value
        if (value) {

            // Finish missing parentheses
            value = validateParentheses(value);

            // Validate our new input value
            if (validateInput(value)) {
                // Update Expression in display
                $("#display").val(
                    $("#display").val() + value
                );
            }
        } 
    }

    // Remove last digit from Display
    function removeFromDisplay() {

        // Get value from display
        var str = $("#display").val();

        if (str) {        
            // Remove last charactor from string
            str = str.substring(0, str.length - 1);
            // Update display
            $("#display").val(str);
        }
    }

    // Remove error notifications 
    function removeErrorNotification()
    {
        // Check if error notifications are being shown
        var isVisible = $('#result').is(':visible');
        // Remove previous errors
        if (isVisible) {
            $("#display").val("");
            $("#result").text("");
            $('#result').hide();
        }
    }

    // Show error notification
    function showErrorNotification(message) {
        $('#result').text(message);
        $('#result').show();
    }


</script>

<script>

    // Create Button click event
    $('button').click(function (e) {
        calcButton($(this), e);
    });

    // Click event for the dynamic buttons used by the memoryModal
    $(document).on('click', 'button.dynamic_button', function (e) {
        calcButton($(this), e);
    });

    // Click Events & Ajax Calls
    function calcButton(control, e) {

        // Block default click handling
        e.preventDefault();

        // Get action from form button (if any)
        var action = control.data('action');
        // Terminate function if no action was assigned
        if (action == null) {
            return;
        }

        // Create POST url using the users action
        var url = '@Url.Action("PlaceHolder", "Calculator")'.replace('PlaceHolder', action);
     
        // TODO : Throw in seperate event
        // Close Open Parentheses
        if (action == "Calculate") {
            validateCloseParentheses();
        }

        // Get antiforgery token
        var token = $('input[name="__RequestVerificationToken"]').val();
        // Build CalculateModel
        var model = {
            Expression: $('#display').val(),
            Result: "",
            MemoryIndex: control.val()
        };

        // Ajax postcall for smooth user interactions
        $.ajax({
            url: url,
            type: 'POST',
            contentType: 'application/json',
            headers: {
                'RequestVerificationToken': token
            },
            data: JSON.stringify(model),
            success: function (response) {

                if (response) {

                    // Update display with response data
                    $("#display").val(response.expression);

                    // Handle response for memory list
                    if (response.calculations) {
                        // Update/Populate the memodyModal
                        // Reverse array so last result are shown on top
                        updateMemoryList(response.calculations.reverse());
                    }

                    // Show Error Alert if any
                    if (response.result) {
                        showErrorNotification(response.result);
                    }
                }
            },
            error: function (xhr, status, error) {
                console.log('Error:', error);
            }
        });
    }

</script>